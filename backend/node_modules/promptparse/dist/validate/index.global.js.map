{"version":3,"sources":["/home/runner/work/promptparse/promptparse/dist/validate/index.global.js","../../src/utils/checksum.ts","../../src/lib/tlv.ts","../../src/lib/parser.ts","../../src/validate/SlipVerify.ts","../../src/validate/TrueMoneySlipVerify.ts","../../src/validate/index.ts","../../src/lib/EMVCoQR.ts"],"names":["promptparse","crc16xmodem","data","crc","i","b","charCodeAt","n","TABLE","decode","payload","tags","idx","length","substring","id","parseInt","value","push","checksum","upperCase","sum","toString","toUpperCase","toLowerCase","slice","withCrcTag","crcTagId","get","tlvTags","tagId","subTagId","tag","find","t","subTags","s","parse","strict","match","expected","calculated","sub","every","val","EMVCoQR","slipVerify","ppqr","apiType","getTagValue","sendingBank","transRef","trueMoneySlipVerify","eventType","transactionId","date","__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__defNormalProp","obj","key","enumerable","configurable","writable","__export","target","all","name","__copyProps","to","from","except","desc","call","__toCommonJS","mod","__publicField","validate_exports","encode","getTag","getTags","getPayload","validate","filter","f"],"mappings":"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","sourcesContent":["\"use strict\";\nvar promptparse = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  // src/validate/index.ts\n  var validate_exports = {};\n  __export(validate_exports, {\n    slipVerify: () => slipVerify,\n    trueMoneySlipVerify: () => trueMoneySlipVerify\n  });\n\n  // src/utils/checksum.ts\n  var TABLE = [\n    0,\n    4129,\n    8258,\n    12387,\n    16516,\n    20645,\n    24774,\n    28903,\n    33032,\n    37161,\n    41290,\n    45419,\n    49548,\n    53677,\n    57806,\n    61935,\n    4657,\n    528,\n    12915,\n    8786,\n    21173,\n    17044,\n    29431,\n    25302,\n    37689,\n    33560,\n    45947,\n    41818,\n    54205,\n    50076,\n    62463,\n    58334,\n    9314,\n    13379,\n    1056,\n    5121,\n    25830,\n    29895,\n    17572,\n    21637,\n    42346,\n    46411,\n    34088,\n    38153,\n    58862,\n    62927,\n    50604,\n    54669,\n    13907,\n    9842,\n    5649,\n    1584,\n    30423,\n    26358,\n    22165,\n    18100,\n    46939,\n    42874,\n    38681,\n    34616,\n    63455,\n    59390,\n    55197,\n    51132,\n    18628,\n    22757,\n    26758,\n    30887,\n    2112,\n    6241,\n    10242,\n    14371,\n    51660,\n    55789,\n    59790,\n    63919,\n    35144,\n    39273,\n    43274,\n    47403,\n    23285,\n    19156,\n    31415,\n    27286,\n    6769,\n    2640,\n    14899,\n    10770,\n    56317,\n    52188,\n    64447,\n    60318,\n    39801,\n    35672,\n    47931,\n    43802,\n    27814,\n    31879,\n    19684,\n    23749,\n    11298,\n    15363,\n    3168,\n    7233,\n    60846,\n    64911,\n    52716,\n    56781,\n    44330,\n    48395,\n    36200,\n    40265,\n    32407,\n    28342,\n    24277,\n    20212,\n    15891,\n    11826,\n    7761,\n    3696,\n    65439,\n    61374,\n    57309,\n    53244,\n    48923,\n    44858,\n    40793,\n    36728,\n    37256,\n    33193,\n    45514,\n    41451,\n    53516,\n    49453,\n    61774,\n    57711,\n    4224,\n    161,\n    12482,\n    8419,\n    20484,\n    16421,\n    28742,\n    24679,\n    33721,\n    37784,\n    41979,\n    46042,\n    49981,\n    54044,\n    58239,\n    62302,\n    689,\n    4752,\n    8947,\n    13010,\n    16949,\n    21012,\n    25207,\n    29270,\n    46570,\n    42443,\n    38312,\n    34185,\n    62830,\n    58703,\n    54572,\n    50445,\n    13538,\n    9411,\n    5280,\n    1153,\n    29798,\n    25671,\n    21540,\n    17413,\n    42971,\n    47098,\n    34713,\n    38840,\n    59231,\n    63358,\n    50973,\n    55100,\n    9939,\n    14066,\n    1681,\n    5808,\n    26199,\n    30326,\n    17941,\n    22068,\n    55628,\n    51565,\n    63758,\n    59695,\n    39368,\n    35305,\n    47498,\n    43435,\n    22596,\n    18533,\n    30726,\n    26663,\n    6336,\n    2273,\n    14466,\n    10403,\n    52093,\n    56156,\n    60223,\n    64286,\n    35833,\n    39896,\n    43963,\n    48026,\n    19061,\n    23124,\n    27191,\n    31254,\n    2801,\n    6864,\n    10931,\n    14994,\n    64814,\n    60687,\n    56684,\n    52557,\n    48554,\n    44427,\n    40424,\n    36297,\n    31782,\n    27655,\n    23652,\n    19525,\n    15522,\n    11395,\n    7392,\n    3265,\n    61215,\n    65342,\n    53085,\n    57212,\n    44955,\n    49082,\n    36825,\n    40952,\n    28183,\n    32310,\n    20053,\n    24180,\n    11923,\n    16050,\n    3793,\n    7920\n  ];\n  function crc16xmodem(data, crc = 0) {\n    for (const i of data) {\n      const b = i.charCodeAt(0);\n      const n = (b ^ crc >> 8) & 255;\n      crc = TABLE[n] ^ crc << 8;\n    }\n    return (crc ^ 0) & 65535;\n  }\n\n  // src/lib/tlv.ts\n  function decode(payload) {\n    const tags = [];\n    let idx = 0;\n    while (idx < payload.length) {\n      const data = payload.substring(idx);\n      const id = data.substring(0, 2);\n      const length = parseInt(data.substring(2, 4));\n      const value = data.substring(4, 4 + length);\n      tags.push({ id, length, value });\n      idx += length + 4;\n    }\n    return tags;\n  }\n  function encode(tags) {\n    let payload = \"\";\n    for (const tag2 of tags) {\n      payload += tag2.id;\n      payload += (\"00\" + tag2.length).slice(-2);\n      if (tag2.subTags) {\n        payload += encode(tag2.subTags);\n        continue;\n      }\n      payload += tag2.value;\n    }\n    return payload;\n  }\n  function checksum(payload, upperCase = true) {\n    let sum = crc16xmodem(payload, 65535).toString(16);\n    sum = upperCase ? sum.toUpperCase() : sum.toLowerCase();\n    sum = (\"0000\" + sum).slice(-4);\n    return sum;\n  }\n  function withCrcTag(payload, crcTagId, upperCase = true) {\n    payload += (\"00\" + crcTagId).slice(-2);\n    payload += \"04\";\n    payload += checksum(payload, upperCase);\n    return payload;\n  }\n  function get(tlvTags, tagId, subTagId) {\n    const tag2 = tlvTags.find((t) => t.id == tagId);\n    if (subTagId) {\n      return tag2?.subTags?.find((s) => s.id == subTagId);\n    }\n    return tag2;\n  }\n\n  // src/lib/EMVCoQR.ts\n  var EMVCoQR = class {\n    constructor(payload, tags) {\n      __publicField(this, \"payload\");\n      __publicField(this, \"tags\");\n      this.payload = payload;\n      this.tags = tags;\n    }\n    getTag(tagId, subTagId) {\n      return get(this.tags, tagId, subTagId);\n    }\n    getTagValue(tagId, subTagId) {\n      return this.getTag(tagId, subTagId)?.value;\n    }\n    getTags() {\n      return this.tags;\n    }\n    /* c8 ignore next 3 */\n    getPayload() {\n      return this.payload;\n    }\n    validate(crcTagId) {\n      const tags = [...this.tags].filter((f) => f.id != crcTagId);\n      const expected = withCrcTag(encode(tags), crcTagId);\n      return this.payload === expected;\n    }\n  };\n\n  // src/lib/parser.ts\n  function parse(payload, strict = false, subTags = true) {\n    if (!payload.match(/^\\d{4}.+/)) {\n      return null;\n    }\n    if (strict) {\n      const expected = payload.slice(-4).toUpperCase();\n      const calculated = checksum(payload.slice(0, -4));\n      if (expected != calculated) return null;\n    }\n    const tags = decode(payload);\n    if (tags.length == 0) {\n      return null;\n    }\n    if (subTags) {\n      for (const tag2 of tags) {\n        if (typeof tag2.value !== \"string\" || !tag2.value.match(/^\\d{4}.+/)) {\n          continue;\n        }\n        const sub = decode(tag2.value);\n        if (sub.every((val) => val.length > 0 && val.length === val.value.length)) {\n          tag2.subTags = sub;\n        }\n      }\n    }\n    return new EMVCoQR(payload, tags);\n  }\n\n  // src/validate/SlipVerify.ts\n  function slipVerify(payload) {\n    const ppqr = parse(payload, true);\n    const apiType = ppqr?.getTagValue(\"00\", \"00\");\n    const sendingBank = ppqr?.getTagValue(\"00\", \"01\");\n    const transRef = ppqr?.getTagValue(\"00\", \"02\");\n    if (apiType !== \"000001\" || !sendingBank || !transRef) {\n      return null;\n    }\n    return {\n      sendingBank,\n      transRef\n    };\n  }\n\n  // src/validate/TrueMoneySlipVerify.ts\n  function trueMoneySlipVerify(payload) {\n    const ppqr = parse(payload, true);\n    const eventType = ppqr?.getTagValue(\"00\", \"02\");\n    const transactionId = ppqr?.getTagValue(\"00\", \"03\");\n    const date = ppqr?.getTagValue(\"00\", \"04\");\n    if (ppqr?.getTagValue(\"00\", \"00\") !== \"01\" && ppqr?.getTagValue(\"00\", \"01\") !== \"01\") {\n      return null;\n    }\n    return {\n      eventType,\n      transactionId,\n      date\n    };\n  }\n  return __toCommonJS(validate_exports);\n})();\n","// CRC-16-CCITT\t(XMODEM)\n\n// Polynomial = 0x1021\nconst TABLE = [\n  0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108,\n  0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210,\n  0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b,\n  0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,\n  0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee,\n  0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6,\n  0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d,\n  0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n  0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5,\n  0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc,\n  0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4,\n  0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,\n  0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13,\n  0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a,\n  0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e,\n  0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n  0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1,\n  0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb,\n  0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0,\n  0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,\n  0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657,\n  0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9,\n  0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882,\n  0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n  0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e,\n  0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07,\n  0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d,\n  0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,\n  0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,\n]\n\nexport function crc16xmodem(data: string, crc = 0x0) {\n  for (const i of data) {\n    const b = i.charCodeAt(0)\n    const n = (b ^ (crc >> 8)) & 0xff\n    crc = TABLE[n] ^ (crc << 8)\n  }\n  return (crc ^ 0) & 0xffff\n}\n","import { crc16xmodem } from '@/utils/checksum'\n\nexport interface TLVTag {\n  /** Tag ID */\n  id: string\n\n  /** Tag Value */\n  value: string\n\n  /** Sub Tags */\n  subTags?: TLVTag[]\n\n  /** Tag Length */\n  length: number\n}\n\n/**\n * Decode TLV string into array of TLV Tags\n *\n * @param payload - TLV string\n * @returns Array of TLV Tags\n */\nexport function decode(payload: string) {\n  const tags: TLVTag[] = []\n\n  let idx = 0\n  while (idx < payload.length) {\n    const data = payload.substring(idx)\n\n    const id = data.substring(0, 2)\n    const length = parseInt(data.substring(2, 4))\n    const value = data.substring(4, 4 + length)\n\n    tags.push({ id, length, value })\n    idx += length + 4\n  }\n\n  return tags\n}\n\n/**\n * Encode TLV Tags array into TLV string\n *\n * @param tags - Array of TLV Tags\n * @returns TLV string\n */\nexport function encode(tags: TLVTag[]) {\n  let payload = ''\n\n  for (const tag of tags) {\n    payload += tag.id\n    payload += ('00' + tag.length).slice(-2)\n\n    if (tag.subTags) {\n      payload += encode(tag.subTags)\n      continue\n    }\n\n    payload += tag.value\n  }\n\n  return payload\n}\n\n/**\n * Generate CRC Checksum for provided string\n *\n * @param payload - Any string\n * @param upperCase - Return CRC Checksum as uppercase string\n * @returns CRC Checksum\n */\nexport function checksum(payload: string, upperCase = true) {\n  let sum = crc16xmodem(payload, 0xffff).toString(16)\n  sum = upperCase ? sum.toUpperCase() : sum.toLowerCase()\n  sum = ('0000' + sum).slice(-4)\n  return sum\n}\n\n/**\n * Get TLV string combined with CRC Tag\n *\n * @param payload - TLV string (without CRC Tag)\n * @param crcTagId - CRC Tag ID\n * @param upperCase - Return CRC Checksum as uppercase string\n * @returns TLV string + CRC Tag ID + CRC Length + CRC Checksum\n */\nexport function withCrcTag(\n  payload: string,\n  crcTagId: string,\n  upperCase = true,\n) {\n  payload += ('00' + crcTagId).slice(-2)\n  payload += '04'\n  payload += checksum(payload, upperCase)\n  return payload\n}\n\n/**\n * Get Tag or Sub-tag by Tag ID in array of TLV Tags\n *\n * @param tlvTags - Array of TLV Tags\n * @param tagId - Target Tag ID\n * @param subTagId - Target Sub-tag ID\n * @returns Instance of Target Tag/Sub-tag\n */\nexport function get(tlvTags: TLVTag[], tagId: string, subTagId?: string) {\n  const tag = tlvTags.find((t) => t.id == tagId)\n\n  if (subTagId) {\n    return tag?.subTags?.find((s) => s.id == subTagId)\n  }\n\n  return tag\n}\n\n/**\n * Create new TLV Tag\n *\n * @param tagId - Tag ID\n * @param value - Tag Value\n * @returns TLV Tag\n */\nexport function tag(tagId: string, value: string): TLVTag {\n  return {\n    id: tagId,\n    length: value.length,\n    value,\n  }\n}\n","import { BOTBarcode } from '@/lib/BOTBarcode'\nimport { EMVCoQR } from '@/lib/EMVCoQR'\nimport { checksum, decode } from '@/lib/tlv'\n\n/**\n * Parse any EMVCo-compatible QR Code data string\n *\n * @param payload - QR Code data string from the scanner\n * @param strict - Validate CRC checksum before parsing the entire string\n * @param subTags - Parse TLV Sub-tags (If exists)\n * @returns QR Instance with TLV Tags\n */\nexport function parse(payload: string, strict = false, subTags = true) {\n  if (!payload.match(/^\\d{4}.+/)) {\n    return null\n  }\n\n  if (strict) {\n    const expected = payload.slice(-4).toUpperCase()\n    const calculated = checksum(payload.slice(0, -4))\n    if (expected != calculated) return null\n  }\n\n  const tags = decode(payload)\n  /* c8 ignore next 3 */\n  if (tags.length == 0) {\n    return null\n  }\n\n  if (subTags) {\n    for (const tag of tags) {\n      if (typeof tag.value !== 'string' || !tag.value.match(/^\\d{4}.+/)) {\n        continue\n      }\n\n      const sub = decode(tag.value)\n      if (\n        sub.every((val) => val.length > 0 && val.length === val.value.length)\n      ) {\n        tag.subTags = sub\n      }\n    }\n  }\n\n  return new EMVCoQR(payload, tags)\n}\n\n/**\n * Parse barcode data string (BOT Barcode Standard)\n *\n * @param payload - Barcode data string from the scanner\n * @returns BOT Barcode Instance\n */\nexport function parseBarcode(payload: string) {\n  return BOTBarcode.fromString(payload)\n}\n","import { parse } from '@/lib/parser'\n\n/**\n * Validate & extract data from Slip Verify QR (for use with Bank Open API)\n *\n * @param payload - QR Code Payload\n * @returns Bank code and Transaction reference or null if payload invalid\n */\nexport function slipVerify(payload: string) {\n  const ppqr = parse(payload, true)\n\n  const apiType = ppqr?.getTagValue('00', '00')\n  const sendingBank = ppqr?.getTagValue('00', '01')\n  const transRef = ppqr?.getTagValue('00', '02')\n\n  if (apiType !== '000001' || !sendingBank || !transRef) {\n    return null\n  }\n\n  return {\n    sendingBank,\n    transRef,\n  }\n}\n","import { parse } from '@/lib/parser'\n\n/**\n * Validate & extract data from TrueMoney Slip Verify QR\n *\n * @param payload - QR Code Payload\n * @returns Type, Transaction ID and Date (DDMMYYYY) or null if payload invalid\n */\nexport function trueMoneySlipVerify(payload: string) {\n  const ppqr = parse(payload, true)\n\n  const eventType = ppqr?.getTagValue('00', '02')\n  const transactionId = ppqr?.getTagValue('00', '03')\n  const date = ppqr?.getTagValue('00', '04')\n\n  if (\n    ppqr?.getTagValue('00', '00') !== '01' &&\n    ppqr?.getTagValue('00', '01') !== '01'\n  ) {\n    return null\n  }\n\n  return {\n    eventType,\n    transactionId,\n    date,\n  }\n}\n","export * from './SlipVerify'\nexport * from './TrueMoneySlipVerify'\n","import { type TLVTag, encode, get, withCrcTag } from '@/lib/tlv'\n\nexport class EMVCoQR {\n  private payload: string\n  private tags: TLVTag[]\n\n  constructor(payload: string, tags: TLVTag[]) {\n    this.payload = payload\n    this.tags = tags\n  }\n\n  public getTag(tagId: string, subTagId?: string) {\n    return get(this.tags, tagId, subTagId)\n  }\n\n  public getTagValue(tagId: string, subTagId?: string) {\n    return this.getTag(tagId, subTagId)?.value\n  }\n\n  public getTags() {\n    return this.tags\n  }\n\n  /* c8 ignore next 3 */\n  public getPayload() {\n    return this.payload\n  }\n\n  public validate(crcTagId: string) {\n    const tags = [...this.tags].filter((f) => f.id != crcTagId)\n    const expected = withCrcTag(encode(tags), crcTagId)\n    return this.payload === expected\n  }\n}\n"]}