{"version":3,"sources":["/home/runner/work/promptparse/promptparse/dist/index.js","../src/index.ts","../src/utils/checksum.ts","../src/lib/tlv.ts","../src/lib/EMVCoQR.ts","../src/generate/promptpay/BillPayment.ts","../src/lib/BOTBarcode.ts","../src/lib/parser.ts","../src/generate/index.ts","../src/generate/promptpay/AnyID.ts","../src/utils/encoder.ts","../src/generate/TrueMoney.ts","../src/generate/TrueMoneySlipVerify.ts","../src/generate/SlipVerify.ts","../src/generate/BOTBarcode.ts","../src/validate/index.ts","../src/validate/SlipVerify.ts","../src/validate/TrueMoneySlipVerify.ts"],"names":["__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__export","target","all","name","get","__copyProps","to","from","except","desc","call","__toCommonJS","mod","__publicField","index_exports","BOTBarcode","EMVCoQR","checksum","decode","encode","generate","generate_exports","parse","parseBarcode","tag","validate","validate_exports","withCrcTag","module","exports","TABLE","crc16xmodem","data","crc","i","b","charCodeAt","n","payload","tags","idx","length","substring","id","parseInt","push","slice","subTags","upperCase","sum","toString","toUpperCase","toLowerCase","crcTagId","tlvTags","tagId","subTagId","find","t","s","getTag","getTagValue","getTags","getPayload","filter","f","expected","billPayment","billerId","amount","ref1","ref2","ref3","tag30","Number","toFixed","_BOTBarcode","amountStr","String","toQrTag30","fromString","startsWith","split","strict","match","calculated","sub","every","val","ProxyType","anyId","botBarcode","slipVerify","trueMoney","trueMoneySlipVerify","type","replace","tag29","encodeTag81","message","map","c","padStart","join","mobileNo","eventType","transactionId","date","sendingBank","transRef","ppqr","apiType"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  BOTBarcode: () => BOTBarcode,\n  EMVCoQR: () => EMVCoQR,\n  checksum: () => checksum,\n  decode: () => decode,\n  encode: () => encode,\n  generate: () => generate_exports,\n  get: () => get,\n  parse: () => parse,\n  parseBarcode: () => parseBarcode,\n  tag: () => tag,\n  validate: () => validate_exports,\n  withCrcTag: () => withCrcTag\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/utils/checksum.ts\nvar TABLE = [\n  0,\n  4129,\n  8258,\n  12387,\n  16516,\n  20645,\n  24774,\n  28903,\n  33032,\n  37161,\n  41290,\n  45419,\n  49548,\n  53677,\n  57806,\n  61935,\n  4657,\n  528,\n  12915,\n  8786,\n  21173,\n  17044,\n  29431,\n  25302,\n  37689,\n  33560,\n  45947,\n  41818,\n  54205,\n  50076,\n  62463,\n  58334,\n  9314,\n  13379,\n  1056,\n  5121,\n  25830,\n  29895,\n  17572,\n  21637,\n  42346,\n  46411,\n  34088,\n  38153,\n  58862,\n  62927,\n  50604,\n  54669,\n  13907,\n  9842,\n  5649,\n  1584,\n  30423,\n  26358,\n  22165,\n  18100,\n  46939,\n  42874,\n  38681,\n  34616,\n  63455,\n  59390,\n  55197,\n  51132,\n  18628,\n  22757,\n  26758,\n  30887,\n  2112,\n  6241,\n  10242,\n  14371,\n  51660,\n  55789,\n  59790,\n  63919,\n  35144,\n  39273,\n  43274,\n  47403,\n  23285,\n  19156,\n  31415,\n  27286,\n  6769,\n  2640,\n  14899,\n  10770,\n  56317,\n  52188,\n  64447,\n  60318,\n  39801,\n  35672,\n  47931,\n  43802,\n  27814,\n  31879,\n  19684,\n  23749,\n  11298,\n  15363,\n  3168,\n  7233,\n  60846,\n  64911,\n  52716,\n  56781,\n  44330,\n  48395,\n  36200,\n  40265,\n  32407,\n  28342,\n  24277,\n  20212,\n  15891,\n  11826,\n  7761,\n  3696,\n  65439,\n  61374,\n  57309,\n  53244,\n  48923,\n  44858,\n  40793,\n  36728,\n  37256,\n  33193,\n  45514,\n  41451,\n  53516,\n  49453,\n  61774,\n  57711,\n  4224,\n  161,\n  12482,\n  8419,\n  20484,\n  16421,\n  28742,\n  24679,\n  33721,\n  37784,\n  41979,\n  46042,\n  49981,\n  54044,\n  58239,\n  62302,\n  689,\n  4752,\n  8947,\n  13010,\n  16949,\n  21012,\n  25207,\n  29270,\n  46570,\n  42443,\n  38312,\n  34185,\n  62830,\n  58703,\n  54572,\n  50445,\n  13538,\n  9411,\n  5280,\n  1153,\n  29798,\n  25671,\n  21540,\n  17413,\n  42971,\n  47098,\n  34713,\n  38840,\n  59231,\n  63358,\n  50973,\n  55100,\n  9939,\n  14066,\n  1681,\n  5808,\n  26199,\n  30326,\n  17941,\n  22068,\n  55628,\n  51565,\n  63758,\n  59695,\n  39368,\n  35305,\n  47498,\n  43435,\n  22596,\n  18533,\n  30726,\n  26663,\n  6336,\n  2273,\n  14466,\n  10403,\n  52093,\n  56156,\n  60223,\n  64286,\n  35833,\n  39896,\n  43963,\n  48026,\n  19061,\n  23124,\n  27191,\n  31254,\n  2801,\n  6864,\n  10931,\n  14994,\n  64814,\n  60687,\n  56684,\n  52557,\n  48554,\n  44427,\n  40424,\n  36297,\n  31782,\n  27655,\n  23652,\n  19525,\n  15522,\n  11395,\n  7392,\n  3265,\n  61215,\n  65342,\n  53085,\n  57212,\n  44955,\n  49082,\n  36825,\n  40952,\n  28183,\n  32310,\n  20053,\n  24180,\n  11923,\n  16050,\n  3793,\n  7920\n];\nfunction crc16xmodem(data, crc = 0) {\n  for (const i of data) {\n    const b = i.charCodeAt(0);\n    const n = (b ^ crc >> 8) & 255;\n    crc = TABLE[n] ^ crc << 8;\n  }\n  return (crc ^ 0) & 65535;\n}\n\n// src/lib/tlv.ts\nfunction decode(payload) {\n  const tags = [];\n  let idx = 0;\n  while (idx < payload.length) {\n    const data = payload.substring(idx);\n    const id = data.substring(0, 2);\n    const length = parseInt(data.substring(2, 4));\n    const value = data.substring(4, 4 + length);\n    tags.push({ id, length, value });\n    idx += length + 4;\n  }\n  return tags;\n}\nfunction encode(tags) {\n  let payload = \"\";\n  for (const tag2 of tags) {\n    payload += tag2.id;\n    payload += (\"00\" + tag2.length).slice(-2);\n    if (tag2.subTags) {\n      payload += encode(tag2.subTags);\n      continue;\n    }\n    payload += tag2.value;\n  }\n  return payload;\n}\nfunction checksum(payload, upperCase = true) {\n  let sum = crc16xmodem(payload, 65535).toString(16);\n  sum = upperCase ? sum.toUpperCase() : sum.toLowerCase();\n  sum = (\"0000\" + sum).slice(-4);\n  return sum;\n}\nfunction withCrcTag(payload, crcTagId, upperCase = true) {\n  payload += (\"00\" + crcTagId).slice(-2);\n  payload += \"04\";\n  payload += checksum(payload, upperCase);\n  return payload;\n}\nfunction get(tlvTags, tagId, subTagId) {\n  const tag2 = tlvTags.find((t) => t.id == tagId);\n  if (subTagId) {\n    return tag2?.subTags?.find((s) => s.id == subTagId);\n  }\n  return tag2;\n}\nfunction tag(tagId, value) {\n  return {\n    id: tagId,\n    length: value.length,\n    value\n  };\n}\n\n// src/lib/EMVCoQR.ts\nvar EMVCoQR = class {\n  constructor(payload, tags) {\n    __publicField(this, \"payload\");\n    __publicField(this, \"tags\");\n    this.payload = payload;\n    this.tags = tags;\n  }\n  getTag(tagId, subTagId) {\n    return get(this.tags, tagId, subTagId);\n  }\n  getTagValue(tagId, subTagId) {\n    return this.getTag(tagId, subTagId)?.value;\n  }\n  getTags() {\n    return this.tags;\n  }\n  /* c8 ignore next 3 */\n  getPayload() {\n    return this.payload;\n  }\n  validate(crcTagId) {\n    const tags = [...this.tags].filter((f) => f.id != crcTagId);\n    const expected = withCrcTag(encode(tags), crcTagId);\n    return this.payload === expected;\n  }\n};\n\n// src/generate/promptpay/BillPayment.ts\nfunction billPayment({\n  billerId,\n  amount,\n  ref1,\n  ref2,\n  ref3\n}) {\n  const tag30 = [\n    tag(\"00\", \"A000000677010112\"),\n    tag(\"01\", billerId),\n    tag(\"02\", ref1)\n  ];\n  if (ref2) {\n    tag30.push(tag(\"03\", ref2));\n  }\n  const payload = [\n    tag(\"00\", \"01\"),\n    tag(\"01\", !amount ? \"11\" : \"12\"),\n    tag(\"30\", encode(tag30)),\n    tag(\"53\", \"764\"),\n    tag(\"58\", \"TH\")\n  ];\n  if (amount) {\n    payload.push(tag(\"54\", Number(amount).toFixed(2)));\n  }\n  if (ref3) {\n    payload.push(tag(\"62\", encode([tag(\"07\", ref3)])));\n  }\n  return withCrcTag(encode(payload), \"63\");\n}\n\n// src/lib/BOTBarcode.ts\nvar BOTBarcode = class _BOTBarcode {\n  constructor(billerId, ref1, ref2 = null, amount = null) {\n    __publicField(this, \"billerId\");\n    __publicField(this, \"ref1\");\n    __publicField(this, \"ref2\");\n    __publicField(this, \"amount\");\n    this.billerId = billerId;\n    this.ref1 = ref1;\n    this.ref2 = ref2;\n    this.amount = amount;\n  }\n  static fromString(payload) {\n    if (!payload.startsWith(\"|\")) {\n      return null;\n    }\n    const data = payload.slice(1).split(\"\\r\", 4);\n    if (data.length != 4) {\n      return null;\n    }\n    const [billerId, ref1, ref2, amount] = data;\n    return new _BOTBarcode(\n      billerId,\n      ref1,\n      ref2.length > 0 ? ref2 : null,\n      amount != \"0\" ? Number((parseInt(amount) / 100).toFixed(2)) : null\n    );\n  }\n  toString() {\n    const { billerId, ref1, ref2, amount } = this;\n    const amountStr = amount ? String(Number(amount.toFixed(2)) * 100) : \"0\";\n    return `|${billerId}\\r${ref1}\\r${ref2 ?? \"\"}\\r${amountStr}`;\n  }\n  /**\n   * Converts BOT Barcode to PromptPay QR Tag 30 (Bill Payment)\n   *\n   * This method works for some biller, depends on destination bank\n   *\n   * @returns QR Code payload\n   */\n  toQrTag30() {\n    const { billerId, ref1, ref2, amount } = this;\n    return billPayment({\n      billerId,\n      ref1,\n      ref2: ref2 ?? void 0,\n      amount: amount ?? void 0\n    });\n  }\n};\n\n// src/lib/parser.ts\nfunction parse(payload, strict = false, subTags = true) {\n  if (!payload.match(/^\\d{4}.+/)) {\n    return null;\n  }\n  if (strict) {\n    const expected = payload.slice(-4).toUpperCase();\n    const calculated = checksum(payload.slice(0, -4));\n    if (expected != calculated) return null;\n  }\n  const tags = decode(payload);\n  if (tags.length == 0) {\n    return null;\n  }\n  if (subTags) {\n    for (const tag2 of tags) {\n      if (typeof tag2.value !== \"string\" || !tag2.value.match(/^\\d{4}.+/)) {\n        continue;\n      }\n      const sub = decode(tag2.value);\n      if (sub.every((val) => val.length > 0 && val.length === val.value.length)) {\n        tag2.subTags = sub;\n      }\n    }\n  }\n  return new EMVCoQR(payload, tags);\n}\nfunction parseBarcode(payload) {\n  return BOTBarcode.fromString(payload);\n}\n\n// src/generate/index.ts\nvar generate_exports = {};\n__export(generate_exports, {\n  ProxyType: () => ProxyType,\n  anyId: () => anyId,\n  billPayment: () => billPayment,\n  botBarcode: () => botBarcode,\n  slipVerify: () => slipVerify,\n  trueMoney: () => trueMoney,\n  trueMoneySlipVerify: () => trueMoneySlipVerify\n});\n\n// src/generate/promptpay/AnyID.ts\nvar ProxyType = /* @__PURE__ */ ((ProxyType2) => {\n  ProxyType2[\"MSISDN\"] = \"01\";\n  ProxyType2[\"NATID\"] = \"02\";\n  ProxyType2[\"EWALLETID\"] = \"03\";\n  ProxyType2[\"BANKACC\"] = \"04\";\n  return ProxyType2;\n})(ProxyType || {});\nfunction anyId({ type, target, amount }) {\n  if (type == \"MSISDN\") {\n    target = (\"0000000000000\" + target.replace(/^0/, \"66\")).slice(-13);\n  }\n  const tag29 = encode([\n    tag(\"00\", \"A000000677010111\"),\n    tag(ProxyType[type], target)\n  ]);\n  const payload = [\n    tag(\"00\", \"01\"),\n    tag(\"01\", !amount ? \"11\" : \"12\"),\n    tag(\"29\", tag29),\n    tag(\"53\", \"764\"),\n    tag(\"58\", \"TH\")\n  ];\n  if (amount) {\n    payload.push(tag(\"54\", Number(amount).toFixed(2)));\n  }\n  return withCrcTag(encode(payload), \"63\");\n}\n\n// src/utils/encoder.ts\nfunction encodeTag81(message) {\n  return message.split(\"\").map((c) => c.charCodeAt(0).toString(16).padStart(4, \"0\")).join(\"\").toUpperCase();\n}\n\n// src/generate/TrueMoney.ts\nfunction trueMoney({ mobileNo, amount, message }) {\n  const tag29 = encode([\n    tag(\"00\", \"A000000677010111\"),\n    tag(\"03\", `14000${mobileNo}`)\n  ]);\n  const payload = [\n    tag(\"00\", \"01\"),\n    tag(\"01\", !amount ? \"11\" : \"12\"),\n    tag(\"29\", tag29),\n    tag(\"53\", \"764\"),\n    tag(\"58\", \"TH\")\n  ];\n  if (amount) {\n    payload.push(tag(\"54\", Number(amount).toFixed(2)));\n  }\n  if (message) {\n    payload.push(tag(\"81\", encodeTag81(message)));\n  }\n  return withCrcTag(encode(payload), \"63\");\n}\n\n// src/generate/TrueMoneySlipVerify.ts\nfunction trueMoneySlipVerify({\n  eventType,\n  transactionId,\n  date\n}) {\n  const payload = [\n    tag(\n      \"00\",\n      encode([\n        tag(\"00\", \"01\"),\n        tag(\"01\", \"01\"),\n        tag(\"02\", eventType),\n        tag(\"03\", transactionId),\n        tag(\"04\", date)\n      ])\n    )\n  ];\n  return withCrcTag(encode(payload), \"91\", false);\n}\n\n// src/generate/SlipVerify.ts\nfunction slipVerify({ sendingBank, transRef }) {\n  const payload = [\n    tag(\n      \"00\",\n      encode([\n        tag(\"00\", \"000001\"),\n        tag(\"01\", sendingBank),\n        tag(\"02\", transRef)\n      ])\n    ),\n    tag(\"51\", \"TH\")\n  ];\n  return withCrcTag(encode(payload), \"91\");\n}\n\n// src/generate/BOTBarcode.ts\nfunction botBarcode({ billerId, ref1, ref2, amount }) {\n  return new BOTBarcode(billerId, ref1, ref2, amount).toString();\n}\n\n// src/validate/index.ts\nvar validate_exports = {};\n__export(validate_exports, {\n  slipVerify: () => slipVerify2,\n  trueMoneySlipVerify: () => trueMoneySlipVerify2\n});\n\n// src/validate/SlipVerify.ts\nfunction slipVerify2(payload) {\n  const ppqr = parse(payload, true);\n  const apiType = ppqr?.getTagValue(\"00\", \"00\");\n  const sendingBank = ppqr?.getTagValue(\"00\", \"01\");\n  const transRef = ppqr?.getTagValue(\"00\", \"02\");\n  if (apiType !== \"000001\" || !sendingBank || !transRef) {\n    return null;\n  }\n  return {\n    sendingBank,\n    transRef\n  };\n}\n\n// src/validate/TrueMoneySlipVerify.ts\nfunction trueMoneySlipVerify2(payload) {\n  const ppqr = parse(payload, true);\n  const eventType = ppqr?.getTagValue(\"00\", \"02\");\n  const transactionId = ppqr?.getTagValue(\"00\", \"03\");\n  const date = ppqr?.getTagValue(\"00\", \"04\");\n  if (ppqr?.getTagValue(\"00\", \"00\") !== \"01\" && ppqr?.getTagValue(\"00\", \"01\") !== \"01\") {\n    return null;\n  }\n  return {\n    eventType,\n    transactionId,\n    date\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  BOTBarcode,\n  EMVCoQR,\n  checksum,\n  decode,\n  encode,\n  generate,\n  get,\n  parse,\n  parseBarcode,\n  tag,\n  validate,\n  withCrcTag\n});\n","export { EMVCoQR } from '@/lib/EMVCoQR'\nexport { BOTBarcode } from '@/lib/BOTBarcode'\n\nexport * from '@/lib/tlv'\nexport * from '@/lib/parser'\n\nexport * as generate from '@/generate'\nexport * as validate from '@/validate'\n","// CRC-16-CCITT\t(XMODEM)\n\n// Polynomial = 0x1021\nconst TABLE = [\n  0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108,\n  0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210,\n  0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b,\n  0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,\n  0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee,\n  0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6,\n  0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d,\n  0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n  0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5,\n  0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc,\n  0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4,\n  0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,\n  0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13,\n  0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a,\n  0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e,\n  0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n  0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1,\n  0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb,\n  0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0,\n  0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,\n  0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657,\n  0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9,\n  0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882,\n  0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n  0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e,\n  0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07,\n  0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d,\n  0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,\n  0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,\n]\n\nexport function crc16xmodem(data: string, crc = 0x0) {\n  for (const i of data) {\n    const b = i.charCodeAt(0)\n    const n = (b ^ (crc >> 8)) & 0xff\n    crc = TABLE[n] ^ (crc << 8)\n  }\n  return (crc ^ 0) & 0xffff\n}\n","import { crc16xmodem } from '@/utils/checksum'\n\nexport interface TLVTag {\n  /** Tag ID */\n  id: string\n\n  /** Tag Value */\n  value: string\n\n  /** Sub Tags */\n  subTags?: TLVTag[]\n\n  /** Tag Length */\n  length: number\n}\n\n/**\n * Decode TLV string into array of TLV Tags\n *\n * @param payload - TLV string\n * @returns Array of TLV Tags\n */\nexport function decode(payload: string) {\n  const tags: TLVTag[] = []\n\n  let idx = 0\n  while (idx < payload.length) {\n    const data = payload.substring(idx)\n\n    const id = data.substring(0, 2)\n    const length = parseInt(data.substring(2, 4))\n    const value = data.substring(4, 4 + length)\n\n    tags.push({ id, length, value })\n    idx += length + 4\n  }\n\n  return tags\n}\n\n/**\n * Encode TLV Tags array into TLV string\n *\n * @param tags - Array of TLV Tags\n * @returns TLV string\n */\nexport function encode(tags: TLVTag[]) {\n  let payload = ''\n\n  for (const tag of tags) {\n    payload += tag.id\n    payload += ('00' + tag.length).slice(-2)\n\n    if (tag.subTags) {\n      payload += encode(tag.subTags)\n      continue\n    }\n\n    payload += tag.value\n  }\n\n  return payload\n}\n\n/**\n * Generate CRC Checksum for provided string\n *\n * @param payload - Any string\n * @param upperCase - Return CRC Checksum as uppercase string\n * @returns CRC Checksum\n */\nexport function checksum(payload: string, upperCase = true) {\n  let sum = crc16xmodem(payload, 0xffff).toString(16)\n  sum = upperCase ? sum.toUpperCase() : sum.toLowerCase()\n  sum = ('0000' + sum).slice(-4)\n  return sum\n}\n\n/**\n * Get TLV string combined with CRC Tag\n *\n * @param payload - TLV string (without CRC Tag)\n * @param crcTagId - CRC Tag ID\n * @param upperCase - Return CRC Checksum as uppercase string\n * @returns TLV string + CRC Tag ID + CRC Length + CRC Checksum\n */\nexport function withCrcTag(\n  payload: string,\n  crcTagId: string,\n  upperCase = true,\n) {\n  payload += ('00' + crcTagId).slice(-2)\n  payload += '04'\n  payload += checksum(payload, upperCase)\n  return payload\n}\n\n/**\n * Get Tag or Sub-tag by Tag ID in array of TLV Tags\n *\n * @param tlvTags - Array of TLV Tags\n * @param tagId - Target Tag ID\n * @param subTagId - Target Sub-tag ID\n * @returns Instance of Target Tag/Sub-tag\n */\nexport function get(tlvTags: TLVTag[], tagId: string, subTagId?: string) {\n  const tag = tlvTags.find((t) => t.id == tagId)\n\n  if (subTagId) {\n    return tag?.subTags?.find((s) => s.id == subTagId)\n  }\n\n  return tag\n}\n\n/**\n * Create new TLV Tag\n *\n * @param tagId - Tag ID\n * @param value - Tag Value\n * @returns TLV Tag\n */\nexport function tag(tagId: string, value: string): TLVTag {\n  return {\n    id: tagId,\n    length: value.length,\n    value,\n  }\n}\n","import { type TLVTag, encode, get, withCrcTag } from '@/lib/tlv'\n\nexport class EMVCoQR {\n  private payload: string\n  private tags: TLVTag[]\n\n  constructor(payload: string, tags: TLVTag[]) {\n    this.payload = payload\n    this.tags = tags\n  }\n\n  public getTag(tagId: string, subTagId?: string) {\n    return get(this.tags, tagId, subTagId)\n  }\n\n  public getTagValue(tagId: string, subTagId?: string) {\n    return this.getTag(tagId, subTagId)?.value\n  }\n\n  public getTags() {\n    return this.tags\n  }\n\n  /* c8 ignore next 3 */\n  public getPayload() {\n    return this.payload\n  }\n\n  public validate(crcTagId: string) {\n    const tags = [...this.tags].filter((f) => f.id != crcTagId)\n    const expected = withCrcTag(encode(tags), crcTagId)\n    return this.payload === expected\n  }\n}\n","import { encode, tag, withCrcTag } from '@/lib/tlv'\n\nexport interface BillPaymentConfig {\n  /** Biller ID (National ID or Tax ID + Suffix) */\n  billerId: string\n\n  /** Transaction amount */\n  amount?: number\n\n  /** Reference 1 */\n  ref1: string\n\n  /** Reference 2 */\n  ref2?: string\n\n  /** (Undocumented) Reference 3 */\n  ref3?: string\n}\n\n/**\n * Generate PromptPay Bill Payment (Tag 30) QR Code\n *\n * @returns QR Code Payload\n */\nexport function billPayment({\n  billerId,\n  amount,\n  ref1,\n  ref2,\n  ref3,\n}: BillPaymentConfig) {\n  const tag30 = [\n    tag('00', 'A000000677010112'),\n    tag('01', billerId),\n    tag('02', ref1),\n  ]\n\n  if (ref2) {\n    tag30.push(tag('03', ref2))\n  }\n\n  const payload = [\n    tag('00', '01'),\n    tag('01', !amount ? '11' : '12'),\n    tag('30', encode(tag30)),\n    tag('53', '764'),\n    tag('58', 'TH'),\n  ]\n\n  if (amount) {\n    payload.push(tag('54', Number(amount).toFixed(2)))\n  }\n\n  if (ref3) {\n    payload.push(tag('62', encode([tag('07', ref3)])))\n  }\n\n  return withCrcTag(encode(payload), '63')\n}\n","import { billPayment } from '@/generate/promptpay/BillPayment'\n\nexport class BOTBarcode {\n  public billerId: string\n  public ref1: string\n  public ref2: string | null\n  public amount: number | null\n\n  constructor(\n    billerId: string,\n    ref1: string,\n    ref2: string | null = null,\n    amount: number | null = null,\n  ) {\n    this.billerId = billerId\n    this.ref1 = ref1\n    this.ref2 = ref2\n    this.amount = amount\n  }\n\n  static fromString(payload: string) {\n    if (!payload.startsWith('|')) {\n      return null\n    }\n\n    const data = payload.slice(1).split('\\r', 4)\n    if (data.length != 4) {\n      return null\n    }\n\n    const [billerId, ref1, ref2, amount] = data\n\n    return new BOTBarcode(\n      billerId,\n      ref1,\n      ref2.length > 0 ? ref2 : null,\n      amount != '0' ? Number((parseInt(amount) / 100).toFixed(2)) : null,\n    )\n  }\n\n  toString() {\n    const { billerId, ref1, ref2, amount } = this\n    const amountStr = amount ? String(Number(amount.toFixed(2)) * 100) : '0'\n    return `|${billerId}\\r${ref1}\\r${ref2 ?? ''}\\r${amountStr}`\n  }\n\n  /**\n   * Converts BOT Barcode to PromptPay QR Tag 30 (Bill Payment)\n   *\n   * This method works for some biller, depends on destination bank\n   *\n   * @returns QR Code payload\n   */\n  toQrTag30() {\n    const { billerId, ref1, ref2, amount } = this\n    return billPayment({\n      billerId,\n      ref1,\n      ref2: ref2 ?? undefined,\n      amount: amount ?? undefined,\n    })\n  }\n}\n","import { BOTBarcode } from '@/lib/BOTBarcode'\nimport { EMVCoQR } from '@/lib/EMVCoQR'\nimport { checksum, decode } from '@/lib/tlv'\n\n/**\n * Parse any EMVCo-compatible QR Code data string\n *\n * @param payload - QR Code data string from the scanner\n * @param strict - Validate CRC checksum before parsing the entire string\n * @param subTags - Parse TLV Sub-tags (If exists)\n * @returns QR Instance with TLV Tags\n */\nexport function parse(payload: string, strict = false, subTags = true) {\n  if (!payload.match(/^\\d{4}.+/)) {\n    return null\n  }\n\n  if (strict) {\n    const expected = payload.slice(-4).toUpperCase()\n    const calculated = checksum(payload.slice(0, -4))\n    if (expected != calculated) return null\n  }\n\n  const tags = decode(payload)\n  /* c8 ignore next 3 */\n  if (tags.length == 0) {\n    return null\n  }\n\n  if (subTags) {\n    for (const tag of tags) {\n      if (typeof tag.value !== 'string' || !tag.value.match(/^\\d{4}.+/)) {\n        continue\n      }\n\n      const sub = decode(tag.value)\n      if (\n        sub.every((val) => val.length > 0 && val.length === val.value.length)\n      ) {\n        tag.subTags = sub\n      }\n    }\n  }\n\n  return new EMVCoQR(payload, tags)\n}\n\n/**\n * Parse barcode data string (BOT Barcode Standard)\n *\n * @param payload - Barcode data string from the scanner\n * @returns BOT Barcode Instance\n */\nexport function parseBarcode(payload: string) {\n  return BOTBarcode.fromString(payload)\n}\n","export * from './promptpay/AnyID'\nexport * from './promptpay/BillPayment'\nexport * from './TrueMoney'\nexport * from './TrueMoneySlipVerify'\nexport * from './SlipVerify'\nexport * from './BOTBarcode'\n","import { encode, tag, withCrcTag } from '@/lib/tlv'\n\nexport enum ProxyType {\n  /** Mobile number */\n  'MSISDN' = '01',\n\n  /** National ID or Tax ID */\n  'NATID' = '02',\n\n  /** E-Wallet ID */\n  'EWALLETID' = '03',\n\n  /** Bank Account (Reserved) */\n  'BANKACC' = '04',\n}\n\nexport interface AnyIDConfig {\n  /** Proxy type */\n  type: keyof typeof ProxyType\n\n  /** Recipient number */\n  target: string\n\n  /** Transaction amount */\n  amount?: number\n}\n\n/**\n * Generate PromptPay AnyID (Tag 29) QR Code\n *\n * @returns QR Code Payload\n */\nexport function anyId({ type, target, amount }: AnyIDConfig) {\n  if (type == 'MSISDN') {\n    target = ('0000000000000' + target.replace(/^0/, '66')).slice(-13)\n  }\n\n  const tag29 = encode([\n    tag('00', 'A000000677010111'),\n    tag(ProxyType[type], target),\n  ])\n\n  const payload = [\n    tag('00', '01'),\n    tag('01', !amount ? '11' : '12'),\n    tag('29', tag29),\n    tag('53', '764'),\n    tag('58', 'TH'),\n  ]\n\n  if (amount) {\n    payload.push(tag('54', Number(amount).toFixed(2)))\n  }\n\n  return withCrcTag(encode(payload), '63')\n}\n","/**\n * Generate an `UCS-2`-like? Hex string for Tag 81\n *\n * This method is equivalent to:\n *\n * `Buffer.from(message, 'utf16le').swap16().toString('hex').toUpperCase()`\n *\n * @param message - Message\n * @returns Hex string of provided message\n */\nexport function encodeTag81(message: string) {\n  return message\n    .split('')\n    .map((c) => c.charCodeAt(0).toString(16).padStart(4, '0'))\n    .join('')\n    .toUpperCase()\n}\n","import { encode, tag, withCrcTag } from '@/lib/tlv'\nimport { encodeTag81 } from '@/utils/encoder'\n\nexport interface TrueMoneyConfig {\n  /** Mobile number */\n  mobileNo: string\n\n  /** Transaction amount */\n  amount?: number\n\n  /** Personal message (Tag 81) */\n  message?: string\n}\n\n/**\n * Generate QR Code for TrueMoney Wallet\n *\n * This QR Code can also be scanned with other apps,\n * just like a regular e-Wallet PromptPay QR\n * but `Personal Message (Tag 81)` will be ignored.\n *\n * @returns QR Code Payload\n */\nexport function trueMoney({ mobileNo, amount, message }: TrueMoneyConfig) {\n  const tag29 = encode([\n    tag('00', 'A000000677010111'),\n    tag('03', `14000${mobileNo}`),\n  ])\n\n  const payload = [\n    tag('00', '01'),\n    tag('01', !amount ? '11' : '12'),\n    tag('29', tag29),\n    tag('53', '764'),\n    tag('58', 'TH'),\n  ]\n\n  if (amount) {\n    payload.push(tag('54', Number(amount).toFixed(2)))\n  }\n\n  if (message) {\n    payload.push(tag('81', encodeTag81(message)))\n  }\n\n  return withCrcTag(encode(payload), '63')\n}\n","import { encode, tag, withCrcTag } from '@/lib/tlv'\n\nexport interface TrueMoneySlipVerifyConfig {\n  /** Event Type (Example: P2P) */\n  eventType: string\n\n  /** Transaction ID */\n  transactionId: string\n\n  /** Date (DDMMYYYY) */\n  date: string\n}\n\n/**\n * Generate TrueMoney Slip Verify QR Code\n *\n * Same as a regular Slip Verify QR but with some differences\n * - Tag 00 and 01 are set to '01'\n * - Tag 51 does not exist\n * - Additional tags that are TrueMoney-specific\n * - CRC checksum are case-sensitive\n *\n * @returns QR Code Payload\n */\nexport function trueMoneySlipVerify({\n  eventType,\n  transactionId,\n  date,\n}: TrueMoneySlipVerifyConfig) {\n  const payload = [\n    tag(\n      '00',\n      encode([\n        tag('00', '01'),\n        tag('01', '01'),\n        tag('02', eventType),\n        tag('03', transactionId),\n        tag('04', date),\n      ]),\n    ),\n  ]\n\n  return withCrcTag(encode(payload), '91', false)\n}\n","import { encode, tag, withCrcTag } from '@/lib/tlv'\n\nexport interface SlipVerifyConfig {\n  /** Bank code */\n  sendingBank: string\n\n  /** Transaction reference */\n  transRef: string\n}\n\n/**\n * Generate Slip Verify QR Code\n *\n * This also called \"Mini-QR\" that embedded in slip used for verify transactions\n *\n * @returns QR Code Payload\n */\nexport function slipVerify({ sendingBank, transRef }: SlipVerifyConfig) {\n  const payload = [\n    tag(\n      '00',\n      encode([\n        tag('00', '000001'),\n        tag('01', sendingBank),\n        tag('02', transRef),\n      ]),\n    ),\n    tag('51', 'TH'),\n  ]\n\n  return withCrcTag(encode(payload), '91')\n}\n","import { BOTBarcode } from '@/lib/BOTBarcode'\n\nexport interface BOTBarcodeConfig {\n  /** Biller ID (Tax ID + Suffix) */\n  billerId: string\n\n  /** Reference No. 1 / Customer No. */\n  ref1: string\n\n  /** Reference No. 2 */\n  ref2?: string | null\n\n  /** Transaction amount */\n  amount?: number | null\n}\n\n/**\n * Generate BOT Barcode\n *\n * @returns Barcode Payload\n */\nexport function botBarcode({ billerId, ref1, ref2, amount }: BOTBarcodeConfig) {\n  return new BOTBarcode(billerId, ref1, ref2, amount).toString()\n}\n","export * from './SlipVerify'\nexport * from './TrueMoneySlipVerify'\n","import { parse } from '@/lib/parser'\n\n/**\n * Validate & extract data from Slip Verify QR (for use with Bank Open API)\n *\n * @param payload - QR Code Payload\n * @returns Bank code and Transaction reference or null if payload invalid\n */\nexport function slipVerify(payload: string) {\n  const ppqr = parse(payload, true)\n\n  const apiType = ppqr?.getTagValue('00', '00')\n  const sendingBank = ppqr?.getTagValue('00', '01')\n  const transRef = ppqr?.getTagValue('00', '02')\n\n  if (apiType !== '000001' || !sendingBank || !transRef) {\n    return null\n  }\n\n  return {\n    sendingBank,\n    transRef,\n  }\n}\n","import { parse } from '@/lib/parser'\n\n/**\n * Validate & extract data from TrueMoney Slip Verify QR\n *\n * @param payload - QR Code Payload\n * @returns Type, Transaction ID and Date (DDMMYYYY) or null if payload invalid\n */\nexport function trueMoneySlipVerify(payload: string) {\n  const ppqr = parse(payload, true)\n\n  const eventType = ppqr?.getTagValue('00', '02')\n  const transactionId = ppqr?.getTagValue('00', '03')\n  const date = ppqr?.getTagValue('00', '04')\n\n  if (\n    ppqr?.getTagValue('00', '00') !== '01' &&\n    ppqr?.getTagValue('00', '01') !== '01'\n  ) {\n    return null\n  }\n\n  return {\n    eventType,\n    transactionId,\n    date,\n  }\n}\n"]}